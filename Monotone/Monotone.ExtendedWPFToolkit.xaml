<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:xtk="http://schemas.xceed.com/wpf/xaml/toolkit"                    
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <xtk:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <DrawingBrush  x:Key="CheckerBrush" Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="White">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0 100,100" />
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="LightGray">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0 50,50" />
                            <RectangleGeometry Rect="50,50 50,50" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>
    <xtk:InverseBoolConverter x:Key="InverseBoolConverter" />


    <!-- generic stuff-->
    <Geometry x:Key="UpArrowGeometry">M 0,3 C0,3 0,4 0,4 0,4 3,4 3,4 3,4 3,3 3,3 3,3 4,3 4,3 4,3 4,4 4,4 4,4 7,4 7,4 7,4 7,3 7,3 7,3 6,3 6,3 6,3 6,2 6,2 6,2 5,2 5,2 5,2 5,1 5,1 5,1 4,1 4,1 4,1 4,0 4,0 4,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3 z</Geometry>
    <Geometry x:Key="DownArrowGeometry">M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z</Geometry>

    <DataTemplate x:Key="IncreaseGlyphNormalKey">
        <Path Width="7"
            Height="4"
            Data="{StaticResource UpArrowGeometry}"
            Fill="{DynamicResource GlyphBrush}"
            SnapsToDevicePixels="True"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Focusable="False" />
    </DataTemplate>
    <DataTemplate x:Key="IncreaseGlyphDisabledKey">
        <Path	Width="7"
            Height="4"
            Data="{StaticResource UpArrowGeometry}"
            Fill="{DynamicResource BaseBorderBrush}"
            SnapsToDevicePixels="True"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Focusable="False" />
    </DataTemplate>

    <DataTemplate x:Key="DecreaseGlyphNormalKey">
        <Path Width="7"
            Height="4"
            Data="{StaticResource DownArrowGeometry}"
            Fill="{DynamicResource GlyphBrush}"
            SnapsToDevicePixels="True"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Focusable="False" />
    </DataTemplate>

    <DataTemplate x:Key="DecreaseGlyphDisabledKey">
        <Path	Width="7"
            Height="4"
            Data="{StaticResource DownArrowGeometry}"
            Fill="{DynamicResource BaseBorderBrush}"
            SnapsToDevicePixels="True"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Focusable="False" />
    </DataTemplate>

    <Style TargetType="{x:Type xtk:ButtonChrome}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:ButtonChrome}">
                    <Grid>

                        <Border x:Name="OuterBorder" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" Background="{DynamicResource ButtonBackgroundBrush}">
                            <Border x:Name="InnerBorder" BorderThickness="0" CornerRadius="{TemplateBinding InnerCornerRadius}" BorderBrush="{DynamicResource BaseBorderBrush}" />
                        </Border>

                        <Border x:Name="MouseOverVisual" Opacity="0" Visibility="Collapsed" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{DynamicResource SelectedBrush}" Background="{DynamicResource ButtonBackgroundBrush}">
                            <Border x:Name="MouseOverInnerVisual" BorderThickness="0" CornerRadius="0" BorderBrush="{DynamicResource SelectedBrush}" />
                        </Border>
                        <Border x:Name="PressedVisual" Opacity="0" Visibility="Collapsed" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{DynamicResource BaseBorderBrush}" Background="{DynamicResource ButtonBackgroundPRessedBrush}">
                            <Border x:Name="PressedInnerVisual" BorderThickness="0" CornerRadius="{TemplateBinding InnerCornerRadius}" BorderBrush="{DynamicResource BaseBorderBrush}" />
                        </Border>

                        <Border x:Name="FocusVisual" Opacity="0" Visibility="Collapsed" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{DynamicResource BaseBorderBrush}" Background="{DynamicResource ButtonBackgroundBrush}">
                            <Border x:Name="FocusInnerVisual" BorderThickness="1" CornerRadius="{TemplateBinding InnerCornerRadius}" BorderBrush="{DynamicResource BaseBorderBrush}" />
                        </Border>

                        <ContentPresenter Margin="{TemplateBinding Padding}"
										      IsEnabled="{TemplateBinding IsEnabled}"
										      Content="{TemplateBinding Content}"
										      ContentStringFormat="{TemplateBinding ContentStringFormat}"
										      ContentTemplate="{TemplateBinding ContentTemplate}"
										      ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- If button is disabled, not checked, and is rendered normal -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="False" />
                                <Condition Property="RenderChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource BaseBrush}" />
                            <Setter TargetName="InnerBorder" Property="Background" Value="{DynamicResource BaseBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                        </MultiTrigger>

                        <!-- if button is enabled and pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PressedVisual" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PressedVisual" Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.050" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PressedVisual" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00.115">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PressedVisual" Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.115" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <!-- if button is enabled, is not checked, the mouse is over, and not pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderChecked" Value="False" />
                                <Condition Property="RenderMouseOver" Value="True" />
                                <Condition Property="RenderPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverVisual" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MouseOverVisual" Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MouseOverVisual" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00.0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MouseOverVisual" Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.0" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <!-- if button is enabled, checked, he mouse is not over, and it is not pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderChecked" Value="True" />
                                <Condition Property="RenderMouseOver" Value="False" />
                                <Condition Property="RenderPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource ButtonBackgroundBrush}" />
                        </MultiTrigger>

                        <!-- if button is focused, is enabled, not pressed, and the mouse is not over -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderFocused" Value="True" />
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderPressed" Value="False" />
                                <Condition Property="RenderMouseOver" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.25" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00.115">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisual" Storyboard.TargetProperty="Opacity">
                                            <LinearDoubleKeyFrame KeyTime="00:00:00.115" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <!-- if not rendered normally -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderNormal" Value="False" />
                                <Condition Property="RenderChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{x:Null}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="Transparent" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolkitToggleButton" TargetType="ToggleButton">
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                                <ContentPresenter Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                            </Border>

                            <xtk:ButtonChrome x:Name="ToggleButtonChrome"
                                          Grid.Column="1"
                                          Visibility="{Binding ShowDropDownButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xtk:ColorPicker}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                          RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xtk:ColorPicker}}"
                                          RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xtk:ColorPicker}}"
											         RenderMouseOver="{TemplateBinding IsMouseOver}"
											         RenderPressed="{TemplateBinding IsPressed}">

                                <Grid x:Name="arrowGlyph" IsHitTestVisible="False" Grid.Column="1" Margin="5">
                                    <Path x:Name="Arrow" Width="7" Height="4" Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z" Fill="{DynamicResource GlyphBrush}" />
                                </Grid>
                            </xtk:ButtonChrome>
                        </Grid>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource BaseBorderBrush}" />
                            <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- controls -->
    <Style TargetType="{x:Type xtk:AutoSelectTextBox}" BasedOn="{StaticResource {x:Type TextBox}}" />

    <Style TargetType="{x:Type xtk:BusyIndicator}">
        <Setter Property="OverlayStyle">
            <Setter.Value>
                <Style TargetType="Rectangle">
                    <Setter Property="Fill" Value="Black" />
                    <Setter Property="Opacity" Value="0.3" />
                </Style>
            </Setter.Value>
        </Setter>
        
        <Setter Property="DisplayAfter" Value="00:00:00.1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:BusyIndicator}">
                    <Grid Margin="5">
                    <Grid>
                            <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="VisibilityStates">
                                <VisualState x:Name="Hidden">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="busycontent" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="overlay" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Visible">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="busycontent" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="overlay" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BusyStatusStates">
                                <VisualState x:Name="Idle">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="content" Storyboard.TargetProperty="(Control.IsEnabled)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <sys:Boolean>True</sys:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Busy">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" Storyboard.TargetName="content" Storyboard.TargetProperty="(Control.IsEnabled)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <sys:Boolean>False</sys:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentControl x:Name="content" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsTabStop="False" Focusable="False" />
                        <Rectangle x:Name="overlay" Style="{TemplateBinding OverlayStyle}" />
                        <ContentPresenter x:Name="busycontent" Margin="5">
                            <ContentPresenter.Content>
                                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <Grid.Effect>
                                            <DropShadowEffect BlurRadius="5"  ShadowDepth="0" Color="{DynamicResource Base6Color}" />
                                        </Grid.Effect>
                                        <Border Background="{DynamicResource BaseBrush}" BorderThickness="1" CornerRadius="2" BorderBrush="{DynamicResource BaseBorderBrush}">
                                        <Border CornerRadius="1" Margin="1" Background="{DynamicResource BaseBrush}">
                                            <Grid MinWidth="150">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <ContentPresenter Content="{TemplateBinding BusyContent}" ContentTemplate="{TemplateBinding BusyContentTemplate}" Margin="8" />
                                            </Grid>
                                        </Border>
                                    </Border>
                                </Grid>
                            </ContentPresenter.Content>
                        </ContentPresenter>
                    </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- spinnerbutton stuff-->
    <Style x:Key="SpinnerButtonStyle"  TargetType="RepeatButton">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Grid>
                        <xtk:ButtonChrome x:Name="Chrome"
                                       BorderBrush="{TemplateBinding BorderBrush}" 
                                       Background="{TemplateBinding Background}"                                                                  
                                       CornerRadius="1"
                                       RenderEnabled="{TemplateBinding IsEnabled}"
                                       RenderMouseOver="{TemplateBinding IsMouseOver}"
                                       RenderNormal="True"
                                       RenderPressed="{TemplateBinding IsPressed}"
                                       SnapsToDevicePixels="true" />

                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Margin="{TemplateBinding Padding}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <BooleanToVisibilityConverter x:Key="b2v" />
    <Style TargetType="{x:Type xtk:ButtonSpinner}">
        <Setter Property="Background" Value="{DynamicResource DarkerBaseBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:ButtonSpinner}">
                    <Border x:Name="Border" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Focusable="False" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                            <Grid Grid.Column="1" Visibility="{TemplateBinding ShowButtonSpinner, Converter={StaticResource b2v}}" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <RepeatButton Style="{StaticResource SpinnerButtonStyle}"  x:Name="PART_IncreaseButton"  IsTabStop="{TemplateBinding IsTabStop}" ContentTemplate="{StaticResource  IncreaseGlyphNormalKey}" />
                                <RepeatButton Style="{StaticResource SpinnerButtonStyle}"  x:Name="PART_DecreaseButton" Grid.Row="1"    IsTabStop="{TemplateBinding IsTabStop}" ContentTemplate="{StaticResource DecreaseGlyphNormalKey}" />
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource SelectedBrush}" />
                        </Trigger>
                        <Trigger SourceName="PART_IncreaseButton" Property="IsEnabled" Value="False">
                            <Setter  TargetName="PART_IncreaseButton" Property="ContentTemplate" Value="{StaticResource IncreaseGlyphDisabledKey}" />
                        </Trigger>
                        <Trigger SourceName="PART_DecreaseButton" Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_DecreaseButton" Property="ContentTemplate" Value="{StaticResource DecreaseGlyphDisabledKey}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Watermark Text Box stuff-->
    <DataTemplate x:Key="DefWatermarkTemplate">
        <ContentControl Content="{Binding}" Foreground="{DynamicResource VeryLighterBaseBrush}" Focusable="False" />
    </DataTemplate>
    <Style TargetType="{x:Type xtk:WatermarkTextBox}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource DarkerBaseBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource BaseBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:WatermarkTextBox}">
                    <Grid>
                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" />
                        <Border x:Name="MouseOverVisual" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource SelectedBrush}" CornerRadius="1" />
                        <Border x:Name="FocusVisual" Opacity="0" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource DarkerSelectedBrush}" CornerRadius="1" />
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="2"  />
                        <ContentPresenter x:Name="PART_WatermarkHost"
                                    Content="{TemplateBinding Watermark}"
                                    ContentTemplate="{TemplateBinding WatermarkTemplate}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    IsHitTestVisible="False"
                                    Margin="{TemplateBinding Padding}"
                                    Visibility="Collapsed" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False" />
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="MouseOverVisual" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="FocusVisual" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border"  Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
                            <Setter TargetName="Border"  Property="Background" Value="{DynamicResource BaseBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- numeric up/down stuff, needs watermark text box stuff-->
 
    <Style x:Key="NumericUpDown" TargetType="{x:Type xtk:InputBase}">
        <Setter Property="Background" Value="{DynamicResource DarkerBaseBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="Focusable"  Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <xtk:ButtonSpinner x:Name="PART_Spinner"
                                    IsTabStop="False"
                                    Background="{TemplateBinding Background}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}"
                                    ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}">
                        <xtk:WatermarkTextBox x:Name="PART_TextBox"
                                          BorderThickness="0"
                                          Background="{TemplateBinding Background}"
                                          ContextMenu="{TemplateBinding ContextMenu}"
                                          FontFamily="{TemplateBinding FontFamily}" 
                                          FontSize="{TemplateBinding FontSize}" 
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontStyle="{TemplateBinding FontStyle}" 
                                          FontWeight="{TemplateBinding FontWeight}" 
                                          Foreground="{TemplateBinding Foreground}" 
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                          IsTabStop="{TemplateBinding IsTabStop}"
                                          MinWidth="20"
                                          AcceptsReturn="False"
                                          Padding="{TemplateBinding Padding}"
                                          SelectAllOnGotFocus="{Binding SelectAllOnGotFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                          AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}"
                                          AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                          TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                          TextWrapping="NoWrap" 
                                          TabIndex="{TemplateBinding TabIndex}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"
                                          WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                    </xtk:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                            <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource SelectedBrush}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_TextBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type xtk:DecimalUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type xtk:DoubleUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type xtk:IntegerUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type xtk:ShortUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type xtk:LongUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type xtk:ByteUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    <Style TargetType="{x:Type xtk:SingleUpDown}" BasedOn="{StaticResource NumericUpDown}" />
    
    
    <!-- color canvas stuff-->
 
    <Style x:Key="ColorCanvasTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="False">
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SliderRepeatButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalSlideThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Height" Value="12" />
        <Setter Property="Width" Value="11" />
        <Setter Property="Foreground" Value="Gray" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Canvas SnapsToDevicePixels="true">
                        <Path x:Name="LeftArrow" Stretch="Fill" StrokeLineJoin="Round" Stroke="{DynamicResource GlyphBrush}" Fill="{DynamicResource GlyphBrush}" Data="F1 M 276.761,316L 262.619,307.835L 262.619,324.165L 276.761,316 Z " RenderTransformOrigin="0.5,0.5" Width="6" Height="8">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform Y="6" X="-3" />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path x:Name="RightArrow" Stretch="Fill" StrokeLineJoin="Round" Stroke="{DynamicResource GlyphBrush}" Fill="{DynamicResource GlyphBrush}" Data="F1 M 276.761,316L 262.619,307.835L 262.619,324.165L 276.761,316 Z " RenderTransformOrigin="0.5,0.5" Width="6" Height="8">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform Angle="-180" />
                                    <TranslateTransform Y="6" X="8" />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type xtk:ColorCanvas}">
        <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:ColorCanvas}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="3">
                        <Grid Margin="2">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid HorizontalAlignment="Center">
                                <Grid.ColumnDefinitions >
                                    <ColumnDefinition Width="200" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <Border BorderThickness="1" BorderBrush="{DynamicResource BaseBorderBrush}" ClipToBounds="True" Background="{StaticResource CheckerBrush}">
                                    <Canvas x:Name="PART_ColorShadingCanvas" Width="200" Height="100" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <Rectangle x:Name="ColorShadingRectangle"
                                         Height="{Binding ElementName=PART_ColorShadingCanvas, Path=Height}"
                                         Width="{Binding ElementName=PART_ColorShadingCanvas, Path=Width}"
                                         Fill="{Binding SelectedColor, ElementName=PART_SpectrumSlider, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                                        <Rectangle x:Name="WhiteGradient" Width="{Binding ElementName=PART_ColorShadingCanvas,Path=Width}" Height="{Binding ElementName=PART_ColorShadingCanvas,Path=Height}">
                                            <Rectangle.Fill>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                    <GradientStop Offset="0" Color="#ffffffff" />
                                                    <GradientStop Offset="1" Color="Transparent" />
                                                </LinearGradientBrush>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                        <Rectangle x:Name="BlackGradient" Width="{Binding ElementName=PART_ColorShadingCanvas,Path=Width}" Height="{Binding ElementName=PART_ColorShadingCanvas,Path=Height}">
                                            <Rectangle.Fill>
                                                <LinearGradientBrush StartPoint="0,1" EndPoint="0, 0">
                                                    <GradientStop Offset="0" Color="#ff000000" />
                                                    <GradientStop Offset="1" Color="#00000000" />
                                                </LinearGradientBrush>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                        <Canvas x:Name="PART_ColorShadeSelector" Width="10" Height="10" IsHitTestVisible="False">
                                            <Ellipse Width="10" Height="10" StrokeThickness="3" Stroke="#FFFFFFFF" IsHitTestVisible="False" />
                                            <Ellipse Width="10" Height="10" StrokeThickness="1" Stroke="#FF000000" IsHitTestVisible="False" />
                                        </Canvas>
                                    </Canvas>
                                </Border>

                                <Border Grid.Row="1" Margin="0,5,0,0">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Border Background="{StaticResource CheckerBrush}" Height="22" Margin="2,0,2,0" BorderThickness="1" BorderBrush="{DynamicResource BaseBorderBrush}">
                                            <Rectangle x:Name="SelectedColor" Fill="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                                        </Border>
                                        <TextBox x:Name="PART_HexadecimalTextBox" Grid.Column="1" Margin="2,0,2,0" VerticalAlignment="Center" Style="{StaticResource ColorCanvasTextBoxStyle}" />
                                    </Grid>
                                </Border>

                                <Border Grid.Column="1" Grid.RowSpan="2" Margin="4,-8,0,0" ClipToBounds="False">
                                    <xtk:ColorSpectrumSlider x:Name="PART_SpectrumSlider" VerticalAlignment="Stretch" />
                                </Border>
                            </Grid>

                            <Border MinWidth="180" Grid.Row="1" BorderThickness="1" ClipToBounds="True" Margin="0,10,0,0">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <TextBlock Grid.Row="0"
                                      Grid.Column="0"
                                      Text="R"
                                      VerticalAlignment="Center" />
                                    <Slider x:Name="PART_RSlider"
                                   Maximum="255"
                                   SmallChange="1"
                                   LargeChange="10"
                                   TickFrequency="1"
                                   Grid.Row="0"
                                   Grid.Column="1"
                                   Margin="4,6,4,6"
                                   Value="{Binding R, RelativeSource={RelativeSource TemplatedParent}}"
                                   VerticalAlignment="Center" />
                                    <TextBox Grid.Row="0"
                                    Grid.Column="2"
                                    Text="{Binding Value, ElementName=PART_RSlider}"
                                    VerticalAlignment="Center"
                                    Style="{StaticResource ColorCanvasTextBoxStyle}" />

                                    <TextBlock Grid.Row="1"
                                      Grid.Column="0"
                                      Text="G"
                                      VerticalAlignment="Center" />
                                    <Slider x:Name="PART_GSlider"
                                   Maximum="255"
                                   SmallChange="1"
                                   LargeChange="10"
                                   TickFrequency="1"
                                   Grid.Row="1"
                                   Grid.Column="1"
                                   Margin="4,6,4,6"
                                   Value="{Binding G, RelativeSource={RelativeSource TemplatedParent}}"
                                   VerticalAlignment="Center" />
                                    <TextBox Grid.Row="1"
                                    Grid.Column="2"
                                    Text="{Binding Value, ElementName=PART_GSlider}"
                                    VerticalAlignment="Center"
                                    Style="{StaticResource ColorCanvasTextBoxStyle}" />

                                    <TextBlock Grid.Row="2"
                                      Grid.Column="0"
                                      Text="B"
                                      VerticalAlignment="Center" />
                                    <Slider x:Name="PART_BSlider"
                                   Maximum="255"
                                   SmallChange="1"
                                   LargeChange="10"
                                   TickFrequency="1"
                                   Grid.Row="2"
                                   Grid.Column="1"
                                   Margin="4,6,4,6"
                                   Value="{Binding B, RelativeSource={RelativeSource TemplatedParent}}"
                                   VerticalAlignment="Center" />
                                    <TextBox Grid.Row="2"
                                    Grid.Column="3"
                                    Text="{Binding Value, ElementName=PART_BSlider}"
                                    VerticalAlignment="Center"
                                    Style="{StaticResource ColorCanvasTextBoxStyle}" />

                                    <TextBlock Grid.Row="3"
                                      Grid.Column="0"
                                      Text="A"
                                      VerticalAlignment="Center"
                                      Visibility="{Binding Path=UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <Slider x:Name="PART_OpacitySlider"
                                   Grid.Row="3"
                                   Grid.Column="1"
                                   Maximum="255"
                                   SmallChange="1"
                                   LargeChange="10"
                                   Margin="4,6,4,6"
                                   Value="{Binding Path=A, RelativeSource={RelativeSource TemplatedParent}}"
                                   VerticalAlignment="Center"
                                   Visibility="{Binding Path=UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                    <TextBox Grid.Row="3"
                                    Grid.Column="3"
                                    Text="{Binding Value, ElementName=PART_OpacitySlider}"
                                    VerticalAlignment="Center"
                                    Style="{StaticResource ColorCanvasTextBoxStyle}" 
                                    Visibility="{Binding Path=UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                </Grid>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type xtk:ColorSpectrumSlider}">
        <Setter Property="Orientation" Value="Vertical" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource GlyphBrush}" />
        <Setter Property="Minimum" Value="1" />
        <Setter Property="Maximum" Value="360" />
        <Setter Property="TickFrequency" Value="0.001" />
        <Setter Property="IsSnapToTickEnabled" Value="True" />
        <Setter Property="IsDirectionReversed" Value="False" />
        <Setter Property="IsMoveToPointEnabled" Value="True" />
        <Setter Property="Value" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:ColorSpectrumSlider}">
                    <Grid>
                        <Border x:Name="PART_TrackBackground" BorderBrush="{DynamicResource BaseBorderBrush}" BorderThickness="1" Width="15" Margin="0,8,0,0">
                            <Rectangle x:Name="PART_SpectrumDisplay" Stretch="Fill" VerticalAlignment="Stretch" />
                        </Border>

                        <Track Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource SliderRepeatButtonStyle}" Command="Slider.DecreaseLarge" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource SliderRepeatButtonStyle}" Command="Slider.IncreaseLarge" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource VerticalSlideThumbStyle}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <!-- color picker stuff, needs color canvas-->
    <Style x:Key="ColorItemContainerStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="ToolTip" Value="{Binding Name}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid ToolTip="{Binding Name}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        <Border BorderThickness="1" Background="Transparent" BorderBrush="Transparent" x:Name="_outerBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border Background="Transparent" BorderThickness="1" BorderBrush="Transparent" x:Name="_innerBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="_outerBorder" Property="BorderBrush" Value="{DynamicResource SelectedBrush}" />
                            <Setter TargetName="_innerBorder" Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="_outerBorder" Property="BorderBrush" Value="{DynamicResource DarkerSelectedBrush}" />
                            <Setter TargetName="_innerBorder" Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate x:Key="ColorItemTemplate">
        <Grid>
            <Border Background="{StaticResource CheckerBrush}" BorderBrush="Black" BorderThickness="1" Margin="2,2,2,2" >
                <Rectangle Width="14" Height="14">
                    <Rectangle.Style>
                        <Style TargetType="Rectangle">
                            <Setter Property="Fill" Value="{Binding Color, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                        </Style>
                    </Rectangle.Style>
                </Rectangle>
            </Border>
        </Grid>
    </DataTemplate>

    
    <Style x:Key="ColorDisplayStyle" TargetType="ContentControl">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Background="{StaticResource CheckerBrush}">
                        <Rectangle Fill="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xtk:ColorPicker}, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorListStyle" TargetType="ListBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Width="200" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ColorItemContainerStyle}" />
        <Setter Property="ItemTemplate" Value="{StaticResource ColorItemTemplate}" />
        <Setter Property="SelectionMode" Value="Single" />
    </Style>

    <Style TargetType="{x:Type xtk:ColorPicker}">
        <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ButtonStyle" Value="{StaticResource ToolkitToggleButton}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:ColorPicker}">
                    <Grid>
                        <ToggleButton x:Name="PART_ColorPickerToggleButton"
                                IsTabStop="True"
                                MinHeight="22" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Padding="{TemplateBinding Padding}"
                                IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                Style="{TemplateBinding ButtonStyle}">
                            <Grid>
                                <ContentControl x:Name="ColorOnly" Style="{StaticResource ColorDisplayStyle}" />

                                <Border x:Name="ColorAndName" Background="{DynamicResource DarkerBaseBrush}" Visibility="Hidden">
                                    <StackPanel Orientation="Horizontal">
                                        <ContentControl HorizontalAlignment="Left" Width="20" Margin="2,1,4,1" Style="{StaticResource ColorDisplayStyle}" BorderThickness="1" BorderBrush="{DynamicResource BaseBorderBrush}" />
                                        <TextBlock Text="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource TextBrush}" VerticalAlignment="Center" />
                                    </StackPanel>
                                </Border>
                            </Grid>
                        </ToggleButton>

                        <Popup x:Name="PART_ColorPickerPalettePopup" VerticalAlignment="Bottom" IsOpen="{Binding ElementName=PART_ColorPickerToggleButton, Path=IsChecked}" StaysOpen="False" AllowsTransparency="True" Focusable="False" HorizontalOffset="1" VerticalOffset="1" PopupAnimation="None">
                            <Border BorderThickness="1" Background="{DynamicResource DarkerBaseBrush}" BorderBrush="{DynamicResource BaseBorderBrush}" Padding="3">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <Grid x:Name="_colorPaletteHost" Visibility="Collapsed" Margin="4">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <!-- Available Colors -->
                                        <Grid Grid.Row="1" Visibility="{TemplateBinding ShowAvailableColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition />
                                                </Grid.RowDefinitions>
                                                <TextBlock Text="{TemplateBinding AvailableColorsHeader}" Background="{DynamicResource MenuHoverBrush}" Padding="2" Margin="0,0,0,1" />
                                                <ListBox x:Name="PART_AvailableColors"
                                             Grid.Row="1"
                                             ItemsSource="{Binding AvailableColors, RelativeSource={RelativeSource TemplatedParent}}"
                                             Style="{StaticResource ColorListStyle}" />
                                            </Grid>
                                        </Grid>

                                        <!-- Standard Colors-->
                                        <Grid Grid.Row="2" Visibility="{TemplateBinding ShowStandardColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <TextBlock Text="{TemplateBinding StandardColorsHeader}" Background="{DynamicResource MenuHoverBrush}" Padding="2" Margin="0,1,0,1" />
                                                <ListBox x:Name="PART_StandardColors"
                                             Grid.Row="1"
                                             ItemsSource="{Binding StandardColors, RelativeSource={RelativeSource TemplatedParent}}"                                                      
                                             Style="{StaticResource ColorListStyle}" />
                                            </Grid>
                                        </Grid>

                                        <!-- Recent Colors-->
                                        <Grid Grid.Row="3" Margin="0,1,0,1" Visibility="{TemplateBinding ShowRecentColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <TextBlock Text="{TemplateBinding RecentColorsHeader}" Background="{DynamicResource MenuHoverBrush}" Padding="2" Margin="0,1,0,1" />
                                                <ListBox x:Name="PART_RecentColors"
                                             Grid.Row="1"
                                             ItemsSource="{Binding RecentColors, RelativeSource={RelativeSource TemplatedParent}}"
                                             Style="{StaticResource ColorListStyle}" />
                                            </Grid>
                                        </Grid>
                                    </Grid>

                                    <!-- ColorCanvas -->
                                    <Grid x:Name="_colorCanvasHost" Visibility="Collapsed">
                                        <xtk:ColorCanvas Background="Transparent"
                                                 BorderThickness="0"
                                                 UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}"
                                                 SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </Grid>

                                    <Separator Grid.Row="1"
                                      HorizontalAlignment="Stretch"
                                      Margin="5,0,5,0"
                                      Visibility="{TemplateBinding ShowAdvancedButton, Converter={StaticResource BooleanToVisibilityConverter}}" />

                                    <!-- More Colors Button -->
                                    <Button x:Name="PART_ColorModeButton" Grid.Row="2" Margin="5" Visibility="{TemplateBinding ShowAdvancedButton, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="DisplayColorAndName" Value="True">
                            <Setter TargetName="ColorOnly" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ColorAndName" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="ColorMode" Value="ColorPalette">
                            <Setter TargetName="_colorPaletteHost" Property="Visibility" Value="Visible" />
                            <Setter TargetName="_colorCanvasHost" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_ColorModeButton" Property="Content" Value="Advanced" />
                        </Trigger>

                        <Trigger Property="ColorMode" Value="ColorCanvas">
                            <Setter TargetName="_colorPaletteHost" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="_colorCanvasHost" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_ColorModeButton" Property="Content" Value="Standard" />
                        </Trigger>

                        <Trigger Property="ShowDropDownButton" Value="False">
                            <Setter Property="BorderThickness" Value="1" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- calculator stuff -->
    <xtk:CalculatorMemoryToVisibilityConverter x:Key="CalculatorMemoryToVisibilityConverter" />

    <Style x:Key="CalculatorOperatorButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Control">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Default" Storyboard.TargetProperty="Opacity" To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_MouseOver" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Default" Storyboard.TargetProperty="Opacity" To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Pressed" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Default" Storyboard.TargetProperty="Opacity" To=".5" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity" To=".5" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="MemoryStates">
                                <VisualState x:Name="EmptyMemory" />
                                <VisualState x:Name="MemoryAssigned">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Border1" Storyboard.TargetProperty="Opacity" To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Border2" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Background="Transparent" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="2" Margin="0,0,0,-1" Opacity="0.5" />
                        <Grid x:Name="PART_Default">
                            <Border BorderThickness="0" CornerRadius="2" Background="Transparent">
                                <Grid>
                                    <Border Name="PART_Border1" BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonBackgroundBrush}" BorderBrush="{DynamicResource BaseBorderBrush}">

                                    </Border>
                                    <Border Name="PART_Border2" BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonBackgroundBrush}" BorderBrush="{DynamicResource BaseBorderBrush}">

                                    </Border>
                                </Grid>
                            </Border>
                        </Grid>
                        <Grid x:Name="PART_MouseOver" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonBackgroundBrush}" BorderBrush="{DynamicResource SelectedBrush}">

                            </Border>
                        </Grid>
                        <Grid x:Name="PART_Pressed" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonBackgroundPressedBrush}" BorderBrush="{DynamicResource DarkerSelectedBrush}">

                            </Border>
                        </Grid>
                        <ContentPresenter x:Name="contentPresenter"
							               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalculatorClearButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource SelectedBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Control">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Default" Storyboard.TargetProperty="Opacity" To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_MouseOver" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Default" Storyboard.TargetProperty="Opacity" To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Pressed" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Default" Storyboard.TargetProperty="Opacity" To=".5" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity" To=".5" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Background="Transparent" BorderBrush="{x:Null}" BorderThickness="0" CornerRadius="2" Margin="0,0,0,-1" Opacity="0.5" />
                        <Grid x:Name="PART_Default">
                            <Border BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonBackgroundBrush}" BorderBrush="{DynamicResource DarkerSelectedBrush}">

                            </Border>
                        </Grid>
                        <Grid x:Name="PART_MouseOver" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonBackgroundBrush}" BorderBrush="{DynamicResource SelectedBrush}">

                            </Border>
                        </Grid>
                        <Grid x:Name="PART_Pressed" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonBackgroundPressedBrush}" BorderBrush="{DynamicResource DarkerSelectedBrush}">

                            </Border>
                        </Grid>
                        <ContentPresenter x:Name="contentPresenter"
							               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalculatorDigitButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Control">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Default" Storyboard.TargetProperty="Opacity" To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_MouseOver" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Default" Storyboard.TargetProperty="Opacity" To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Pressed" Storyboard.TargetProperty="Opacity" To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Default" Storyboard.TargetProperty="Opacity" To=".5" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity" To=".5" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border BorderBrush="{x:Null}" BorderThickness="0" Background="Transparent" CornerRadius="3" Margin="0,0,0,-1" Opacity="0.5" />
                        <Grid x:Name="PART_Default">
                            <Border BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonBackgroundBrush}" BorderBrush="{DynamicResource BaseBorderBrush}">
                                
                            </Border>
                        </Grid>
                        <Grid x:Name="PART_MouseOver" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonBackgroundBrush}" BorderBrush="{DynamicResource SelectedBrush}">
                              
                            </Border>
                        </Grid>
                        <Grid x:Name="PART_Pressed" Opacity="0">
                            <Border BorderThickness="1" CornerRadius="2" Background="{DynamicResource ButtonBackgroundPressedBrush}" BorderBrush="{DynamicResource DarkerSelectedBrush}">
                               
                            </Border>
                        </Grid>
                        <ContentPresenter x:Name="contentPresenter"
							               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="PART_Default" Value="{DynamicResource BaseBrush}" />
                            <Setter Property="Background" TargetName="PART_Pressed" Value="{DynamicResource BaseBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="CalculatorButtonPanel" TargetType="{x:Type ContentControl}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="3" />
                <ColumnDefinition />
                <ColumnDefinition Width="3" />
                <ColumnDefinition />
                <ColumnDefinition Width="3" />
                <ColumnDefinition />
                <ColumnDefinition Width="3" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="3" />
                <RowDefinition />
                <RowDefinition Height="3" />
                <RowDefinition />
                <RowDefinition Height="3" />
                <RowDefinition />
                <RowDefinition Height="3" />
                <RowDefinition />
                <RowDefinition Height="3" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Button Grid.Column="0" Grid.Row="0" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="MC"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="2" Grid.Row="0" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="MR" 
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="0" Grid.Row="2" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Back" 
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" Grid.RowSpan="1" />

            <Button Grid.Column="2" Grid.Row="2" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Cancel" 
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorClearButtonStyle}" />

            <Button Grid.Column="4" Grid.Row="2" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Clear"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorClearButtonStyle}" Grid.ColumnSpan="1" Grid.RowSpan="1" />

            <Button Grid.Column="4" Grid.Row="0" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="MS"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="6" Grid.Row="0" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="MAdd"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" Margin="0" />

            <Button Grid.Column="8" Grid.Row="0" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="MSub"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="6" Grid.Row="2" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Negate"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="8" Grid.Row="2" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Sqrt"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="0" Grid.Row="4" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Seven"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="2" Grid.Row="4" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Eight"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="4" Grid.Row="4" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Nine"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="6" Grid.Row="4" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Divide"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="8" Grid.Row="4" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Percent"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="0" Grid.Row="6" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Four"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="2" Grid.Row="6" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Five"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="4" Grid.Row="6" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Six"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="6" Grid.Row="6" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Multiply"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="8" Grid.Row="6" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Fraction"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="0" Grid.Row="8" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="One"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"                                    
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="2" Grid.Row="8" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Two"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="4" Grid.Row="8" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Three"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="6" Grid.Row="8" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Subtract"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="8" Grid.Row="8" Grid.RowSpan="3" MinWidth="28" MinHeight="55"
					  xtk:Calculator.CalculatorButtonType="Equal"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />

            <Button Grid.Column="0" Grid.Row="10" Grid.ColumnSpan="3" MinWidth="59" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Zero"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="4" Grid.Row="10" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Decimal"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorDigitButtonStyle}" />

            <Button Grid.Column="6" Grid.Row="10" MinWidth="28" MinHeight="26"
					  xtk:Calculator.CalculatorButtonType="Add"
					  Command="xtk:CalculatorCommands.CalculatorButtonClick"
					  Style="{StaticResource CalculatorOperatorButtonStyle}" />
        </Grid>
    </ControlTemplate>
    <Style TargetType="{x:Type xtk:Calculator}">
        <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:Calculator}">
                    <Border Background="{TemplateBinding Background}"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="{TemplateBinding BorderThickness}"
                       CornerRadius="3">
                        <Grid Margin="10">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border x:Name="PART_Display" Margin="0,0,0,10" Background="{DynamicResource BaseBrush}" BorderBrush="{DynamicResource BaseBorderBrush}" BorderThickness="1">
                                <StackPanel>
                                    <Path Stretch="Fill"
                                 Height="9"
                                 Width="9"
                                 Fill="Transparent"
                                 Data="F1 M 508.172,390L 506.031,390L 504.612,393.385C 504.174,394.477 503.788,395.533 503.453,396.555L 503.417,396.555C 503.334,395.528 503.206,394.471 503.035,393.385L 502.454,390L 500.301,390L 498.637,399L 500.226,399L 500.807,395.537C 500.903,394.973 501,394.379 501.099,393.756C 501.198,393.133 501.287,392.534 501.367,391.957L 501.402,391.957C 501.444,392.514 501.499,393.08 501.567,393.655C 501.635,394.231 501.712,394.776 501.8,395.292L 502.382,398.871L 503.7,398.871L 505.231,395.233C 505.445,394.724 505.663,394.187 505.884,393.622C 506.105,393.057 506.313,392.502 506.508,391.957L 506.543,391.957C 506.411,393.11 506.304,394.292 506.223,395.502L 505.979,399L 507.637,399L 508.172,390 Z "
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Top"                                              
                                 Margin="4,4,0,0"
                                 Visibility="{Binding Memory, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CalculatorMemoryToVisibilityConverter}}" />
                                    <TextBlock FontSize="18"
                                      HorizontalAlignment="Right"
                                      Margin="0,0,4,0"
                                      Text="{Binding DisplayText, RelativeSource={RelativeSource TemplatedParent}}" />
                                </StackPanel>
                            </Border>
                            <ContentControl x:Name="PART_CalculatorButtonPanel" Grid.Row="1" Template="{StaticResource CalculatorButtonPanel}" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_Display" Property="Background" Value="{DynamicResource DarkerBaseBrush}" />
                            <Setter TargetName="PART_Display" Property="BorderBrush" Value="{DynamicResource DarkerSelectedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xtk:CalculatorUpDown}">
        <Setter Property="Background" Value="{DynamicResource DarkerBaseBrush}" />
        <Setter Property="BorderThickness" Value="1,1,0,1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:CalculatorUpDown}">
                    <Grid>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <xtk:ButtonSpinner x:Name="PART_Spinner"
                                          IsTabStop="False"
                                          Background="{TemplateBinding Background}"
                                          BorderThickness="{TemplateBinding BorderThickness}"
                                          AllowSpin="{TemplateBinding AllowSpin}"
                                          ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                                <xtk:WatermarkTextBox x:Name="PART_TextBox"
                                                BorderThickness="0" 
                                                Background="{TemplateBinding Background}"
                                                ContextMenu="{TemplateBinding ContextMenu}"
                                                FontFamily="{TemplateBinding FontFamily}" 
                                                FontSize="{TemplateBinding FontSize}" 
                                                FontStretch="{TemplateBinding FontStretch}"
                                                FontStyle="{TemplateBinding FontStyle}" 
                                                FontWeight="{TemplateBinding FontWeight}" 
                                                Foreground="{TemplateBinding Foreground}" 
                                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                                MinWidth="20"
                                                AcceptsReturn="False"
                                                Padding="0"
                                                SelectAllOnGotFocus="{TemplateBinding SelectAllOnGotFocus}"
                                                AutoSelectBehavior="{TemplateBinding AutoSelectBehavior}"
                                                AutoMoveFocus="{TemplateBinding AutoMoveFocus}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="NoWrap" 
                                                TabIndex="{TemplateBinding TabIndex}"
                                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Watermark="{TemplateBinding Watermark}"
                                                WatermarkTemplate="{TemplateBinding WatermarkTemplate}" />
                            </xtk:ButtonSpinner>
                            <ToggleButton x:Name="_calculatorToggleButton"
                                   Grid.Column="1"
                                   Focusable="False"
                                   IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                   Style="{StaticResource ToolkitToggleButton}"
                                   IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}" />
                        </Grid>
                        <Popup x:Name="PART_CalculatorPopup"
                         IsOpen="{Binding IsChecked, ElementName=_calculatorToggleButton}"
                         StaysOpen="False">
                            <Border BorderThickness="1" Background="{DynamicResource DarkerBaseBrush}" BorderBrush="{DynamicResource BaseBorderBrush}" Padding="3">
                                <StackPanel>
                                    <xtk:Calculator x:Name="PART_Calculator"
                                             Background="Transparent"
                                             BorderThickness="0"
                                             DisplayText="{Binding DisplayText, RelativeSource={RelativeSource TemplatedParent}}"
                                             Memory="{Binding Memory, RelativeSource={RelativeSource TemplatedParent}}"
                                             Precision="{Binding Precision, RelativeSource={RelativeSource TemplatedParent}}" />
                                </StackPanel>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- check combo box stuff-->
    <Style TargetType="{x:Type xtk:CheckComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:CheckComboBox}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" Margin="1" PopupAnimation="None" Placement="Bottom">
                            <Grid MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                <Border x:Name="DropDownBorder" MaxHeight="{Binding MaxDropDownHeight,  RelativeSource={RelativeSource TemplatedParent}}"  BorderBrush="{DynamicResource BaseBorderBrush}" BorderThickness="1" Background="{DynamicResource DarkerBaseBrush}">
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" Height="{Binding ActualHeight, ElementName=DropDownBorder}" Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                            </Canvas>
                                            <ItemsPresenter x:Name="PART_ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>

                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <ToggleButton x:Name="PART_DropDownButton" Padding="2" Content="{TemplateBinding Text}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Focusable="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ToolkitToggleButton}"
                                IsHitTestVisible="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource SelectedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                            <Setter TargetName="PART_DropDownButton" Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                            <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type xtk:CheckListBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource DarkerBaseBrush}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Once" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:CheckListBox}">
                    <Border Background="{TemplateBinding Background}"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Padding="{TemplateBinding Padding}" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource SelectedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource DisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- child window stuff-->
    <Style TargetType="{x:Type xtk:ChildWindow}">
        <Setter Property="MinWidth" Value="140" />
        
        <Setter Property="Background" Value="{DynamicResource BaseBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BaseBrush}" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:ChildWindow}">
                    <Grid x:Name="PART_Root">
                        <!-- Used For modal layer Deprecated-->
                        <Grid.Resources>
                            <!-- Used For KeyboardFocus Deprecated-->
                            <Style x:Key="FocusVisualStyle" TargetType="Control">
                                <Setter Property="BorderBrush" Value="Black" />
                                <Setter Property="Background" Value="Transparent" />
                                <Setter Property="Margin" Value="-1" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Rectangle Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" Margin="{TemplateBinding Margin}" StrokeDashArray="4 3" StrokeThickness="0.5">
                                                <Rectangle.RenderTransform>
                                                    <TranslateTransform x:Name="_translateTransform" X="{Binding Left}" Y="{Binding Top}" />
                                                </Rectangle.RenderTransform>
                                            </Rectangle>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Grid.Resources>

                        <!-- Used for drag -->
                        <Grid x:Name="PART_WindowRoot"
                          HorizontalAlignment="Left" 
                          VerticalAlignment="Top" 
                          MinWidth="{TemplateBinding MinWidth}"
                          MinHeight="{TemplateBinding MinHeight}" 
                          Width="{TemplateBinding Width}" 
                          Height="{TemplateBinding Height}">

                            <xtk:WindowControl x:Name="PART_WindowControl" 
                                            Caption="{TemplateBinding Caption}" 
                                            CaptionForeground="{TemplateBinding CaptionForeground}" 
                                            CaptionShadowBrush="{TemplateBinding CaptionShadowBrush}" 
                                            CaptionIcon="{TemplateBinding CaptionIcon}"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}" 
                                            BorderThickness="{TemplateBinding BorderThickness}" 
                                            IsActive="{TemplateBinding IsActive}"
                                            WindowBackground="{TemplateBinding WindowBackground}" 
                                            WindowInactiveBackground="{TemplateBinding WindowInactiveBackground}" 
                                            WindowBorderBrush="{TemplateBinding WindowBorderBrush}"
                                            WindowBorderThickness="{TemplateBinding WindowBorderThickness}"
                                            CloseButtonVisibility="{TemplateBinding CloseButtonVisibility}"
                                            CloseButtonStyle="{TemplateBinding CloseButtonStyle}" 
                                            WindowOpacity="{TemplateBinding WindowOpacity}" 
                                            Content="{TemplateBinding Content}"
                                            WindowStyle="{TemplateBinding WindowStyle}"
                                            Width="{TemplateBinding Width}"
                                            Height="{TemplateBinding Height}">
                            </xtk:WindowControl>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Closed">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <!-- Datetime stuff-->
    <Style TargetType="{x:Type xtk:DateTimePicker}">
        <Setter Property="Background" Value="{DynamicResource DarkerBaseBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="TimeWatermarkTemplate" Value="{StaticResource DefWatermarkTemplate}" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:DateTimePicker}">
                    <Border>
                        <Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <xtk:ButtonSpinner x:Name="PART_Spinner"
                                             IsTabStop="False"
                                             Background="{TemplateBinding Background}"
                                             BorderThickness="{TemplateBinding BorderThickness}"
                                             AllowSpin="{TemplateBinding AllowSpin}"
                                             ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                                    <xtk:WatermarkTextBox x:Name="PART_TextBox"
                                                   BorderThickness="0" 
                                                   Background="Transparent"
                                                   FontFamily="{TemplateBinding FontFamily}" 
                                                   FontSize="{TemplateBinding FontSize}" 
                                                   FontStretch="{TemplateBinding FontStretch}"
                                                   FontStyle="{TemplateBinding FontStyle}" 
                                                   FontWeight="{TemplateBinding FontWeight}" 
                                                   Foreground="{TemplateBinding Foreground}" 
                                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                                   MinWidth="20"
                                                   AcceptsReturn="False"
                                                   Padding="0"
                                                   TextAlignment="{TemplateBinding TextAlignment}"
                                                   TextWrapping="NoWrap" 
                                                   Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                                   TabIndex="{TemplateBinding TabIndex}"
                                                   Watermark="{TemplateBinding Watermark}"
                                                   WatermarkTemplate="{TemplateBinding WatermarkTemplate}" />
                                </xtk:ButtonSpinner>
                                <ToggleButton x:Name="_calendarToggleButton"
                                      Grid.Column="1"
                                      Focusable="False" Style="{StaticResource ToolkitToggleButton}"
                                      IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                      IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                      IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}" />
                            </Grid>
                            <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" StaysOpen="False">
                                <Border BorderThickness="1" Background="{DynamicResource DarkerBaseBrush}" BorderBrush="{DynamicResource BaseBorderBrush}" Padding="3">
                                    <StackPanel>
                                        <Calendar x:Name="PART_Calendar" BorderThickness="0" />
                                        <xtk:TimePicker x:Name="PART_TimeUpDown"
                                                Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                                Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" 
                                                Format="{TemplateBinding TimeFormat}"
                                                FormatString="{TemplateBinding TimeFormatString}"
                                                Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                                                Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}"
                                                Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}"
                                                ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}"
                                                Watermark="{TemplateBinding TimeWatermark}"
                                                WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}"
                                                Visibility="{TemplateBinding TimePickerVisibility}"/>
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DateTimeUpDown" TargetType="{x:Type xtk:DateTimeUpDown}">
        <Setter Property="Background" Value="{DynamicResource DarkerBaseBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BaseBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefWatermarkTemplate}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:DateTimeUpDown}">
                    <xtk:ButtonSpinner x:Name="PART_Spinner"
                                    IsTabStop="False"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    AllowSpin="{TemplateBinding AllowSpin}"
                                    ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                        <xtk:WatermarkTextBox x:Name="PART_TextBox"
                                          BorderThickness="0" 
                                          Background="Transparent"
                                          ContextMenu="{TemplateBinding ContextMenu}"
                                          FontFamily="{TemplateBinding FontFamily}" 
                                          FontSize="{TemplateBinding FontSize}" 
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontStyle="{TemplateBinding FontStyle}" 
                                          FontWeight="{TemplateBinding FontWeight}" 
                                          Foreground="{TemplateBinding Foreground}" 
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                          MinWidth="20"
                                          AcceptsReturn="False"
                                          Padding="{TemplateBinding Padding}"
                                          TextAlignment="{TemplateBinding TextAlignment}"
                                          TextWrapping="NoWrap" 
                                          TabIndex="{TemplateBinding TabIndex}"
                                          Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                          Watermark="{TemplateBinding Watermark}"
                                          WatermarkTemplate="{TemplateBinding WatermarkTemplate}" />
                    </xtk:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_TextBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xtk:DateTimeUpDown}" BasedOn="{StaticResource DateTimeUpDown}" />

    <Style TargetType="{x:Type xtk:Selector}">
        <Setter Property="Background" Value="{DynamicResource DarkerBaseBrush}" />
    </Style>
    <Style TargetType="{x:Type xtk:SelectorItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsTabStop"  Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:SelectorItem}">
                    <Border x:Name="_background"
                       Background="{TemplateBinding Background}"
                       BorderBrush="{TemplateBinding BorderBrush}"
                       BorderThickness="{TemplateBinding BorderThickness}">
                        <CheckBox Foreground="{TemplateBinding Foreground}"
                            IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}"
                            Content="{TemplateBinding Content}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" 
                            ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="_background" Property="Background" Value="{DynamicResource MenuHoverBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource SelectedBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource DarkerSelectedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type xtk:SplitButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xtk:SplitButton}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                        <xtk:ButtonChrome x:Name="ControlChrome" Background="{TemplateBinding Background}" RenderEnabled="{TemplateBinding IsEnabled}" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Button x:Name="PART_ActionButton" Margin="0" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}" >
                                    <Button.Template>
                                        <ControlTemplate TargetType="Button">
                                            <ContentPresenter />
                                        </ControlTemplate>
                                    </Button.Template>
                                    <Grid>
                                        <xtk:ButtonChrome x:Name="ActionButtonChrome"
                                                   BorderThickness="1,1,0,1"
                                                   RenderEnabled="{TemplateBinding IsEnabled}"
											                  RenderMouseOver="{Binding IsMouseOver, ElementName=PART_ActionButton}"
											                  RenderPressed="{Binding IsPressed, ElementName=PART_ActionButton}">
                                            <ContentPresenter Name="ActionButtonContent" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="true" />
                                        </xtk:ButtonChrome>
                                    </Grid>
                                </Button>
                                <ToggleButton x:Name="PART_ToggleButton"
                                      Grid.Column="1"
                                      IsTabStop="False"
                                      IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                      IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}">
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <ContentPresenter />
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                    <Grid>
                                        <xtk:ButtonChrome x:Name="ToggleButtonChrome"
                                                   Padding="1,0,1,0"
                                                   RenderChecked="{TemplateBinding IsOpen}"
                                                   RenderEnabled="{TemplateBinding IsEnabled}"
											                  RenderMouseOver="{Binding IsMouseOver, ElementName=PART_ToggleButton}"
											                  RenderPressed="{Binding IsPressed, ElementName=PART_ToggleButton}">
                                            <Grid x:Name="arrowGlyph" IsHitTestVisible="False" Margin="4,3,4,3">
                                                <Path x:Name="Arrow" Width="7" Height="4" Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z" Fill="{DynamicResource GlyphBrush}" />
                                            </Grid>
                                        </xtk:ButtonChrome>
                                    </Grid>
                                </ToggleButton>
                            </Grid>
                        </xtk:ButtonChrome>

                        <Popup x:Name="PART_Popup" 
                         HorizontalOffset="1"
                         VerticalOffset="1"
                         AllowsTransparency="True"
                         StaysOpen="False"
                         Placement="Bottom"
                         Focusable="False"
                         IsOpen="{Binding IsChecked, ElementName=PART_ToggleButton}">
                            <!-- TODO: Create Popup Styles that can be reused on all popups in the toolkit-->
                            <Border BorderThickness="1" Background="{DynamicResource DarkerBaseBrush}" BorderBrush="{DynamicResource BaseBorderBrush}">
                                <ContentPresenter x:Name="PART_ContentPresenter" Content="{TemplateBinding DropDownContent}" />
                            </Border>
                        </Popup>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource DisabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>